name: CI/CD Pipeline

on:
  push:
    tags: [ 'v*', '[0-9]+.[0-9]+.[0-9]+*' ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Format check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted:"
          gofmt -s -l .
          exit 1
        fi

    - name: Vet
      run: go vet ./...

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...

  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: v2.4.0

  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Gosec Security Scanner
      uses: securego/gosec@master
      with:
        args: './...'

  helm-lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Helm
      uses: azure/setup-helm@v4
      with:
        version: v3.19.0

    - name: Lint Helm chart
      run: helm lint deploy/helm/cf-switch

    - name: Template Helm chart
      run: |
        helm template cf-switch deploy/helm/cf-switch \
          --set env.DEST_HOSTNAMES.value="test.example.com" \
          --set env.CLOUDFLARE_ZONE_ID.value="test-zone-id" \
          --dry-run

  build:
    runs-on: ubuntu-latest
    needs: [test, lint, security, helm-lint]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Build binary
      run: |
        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-w -s" -o cf-switch ./cmd/cf-switch

    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: cf-switch-binary
        path: cf-switch

  docker:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix=sha-

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

  release:
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        ref: main

    - name: Set up Helm
      uses: azure/setup-helm@v4
      with:
        version: v3.18.3

    - name: Update Chart version
      run: |
        # Extract version from GitHub release (remove 'v' prefix if present)
        VERSION="${{ github.event.release.tag_name }}"
        VERSION="${VERSION#v}"
        echo "Updating Helm chart to version: $VERSION"
        
        # Update Chart.yaml with the new version and appVersion
        sed -i "s/^version:.*/version: $VERSION/" deploy/helm/cf-switch/Chart.yaml
        sed -i "s/^appVersion:.*/appVersion: \"$VERSION\"/" deploy/helm/cf-switch/Chart.yaml
        
        # Update values.yaml with the new image tag
        sed -i "s/^  tag:.*/  tag: $VERSION/" deploy/helm/cf-switch/values.yaml
        
        # Commit and push the changes
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add deploy/helm/cf-switch/Chart.yaml deploy/helm/cf-switch/values.yaml
        git commit -m "Update Helm chart to version $VERSION" || exit 0
        git push origin main

    - name: Package Helm chart
      run: |
        mkdir -p dist
        helm package deploy/helm/cf-switch -d dist

    - name: Upload Helm chart to release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          dist/*.tgz
        tag_name: ${{ github.event.release.tag_name }}
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
