name: Release Helm Charts to GitHub Pages

on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types: [completed]
    branches: [main]

jobs:
  release:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' && startsWith(github.event.workflow_run.head_branch, '0.') }}
    permissions:
      contents: write
      pages: write
      id-token: write
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: main
        fetch-depth: 0

    - name: Configure Git
      run: |
        git config user.name "$GITHUB_ACTOR"
        git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

    - name: Install Helm
      uses: azure/setup-helm@v4
      with:
        version: v3.19.0

    - name: Create release packages directory
      run: mkdir -p .cr-release-packages

    - name: Package Helm chart
      run: |
        helm package deploy/helm/cf-switch -d .cr-release-packages

    - name: Create or update index
      run: |
        # Download existing index if it exists
        if curl -f -s -o .cr-release-packages/index.yaml https://meyeringh.github.io/cf-switch/index.yaml; then
          echo "Downloaded existing index.yaml"
        else
          echo "No existing index.yaml found, will create new one"
          echo "apiVersion: v1" > .cr-release-packages/index.yaml
          echo "entries:" >> .cr-release-packages/index.yaml
        fi
        
        # Generate new index with all packages
        helm repo index .cr-release-packages --url https://meyeringh.github.io/cf-switch --merge .cr-release-packages/index.yaml

    - name: Copy landing page
      run: |
        # Copy the landing page to the packages directory
        cp index.html .cr-release-packages/

    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        CHART_VERSION=$(helm show chart deploy/helm/cf-switch | grep '^version:' | awk '{print $2}')
        CHART_NAME="cf-switch"
        RELEASE_NAME="helm-chart-${CHART_NAME}-${CHART_VERSION}"
        
        # Check if release already exists
        if gh release view "$RELEASE_NAME" >/dev/null 2>&1; then
          echo "Release $RELEASE_NAME already exists, skipping..."
        else
          # Create release and upload chart
          gh release create "$RELEASE_NAME" \
            .cr-release-packages/*.tgz \
            --title "Helm Chart ${CHART_NAME} ${CHART_VERSION}" \
            --notes "Helm chart release for ${CHART_NAME} version ${CHART_VERSION}"
        fi

    - name: Setup Pages
      uses: actions/configure-pages@v5

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: .cr-release-packages

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
